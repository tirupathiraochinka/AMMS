import { ListView, ItemCreatedArgs, Fields, UISelectedItem } from './list-view';
/**
 * ElementContext
 */
export interface ElementContext extends HTMLElement {
    context: {
        [key: string]: string | Object;
    };
}
export declare class Virtualization {
    constructor(instance: ListView);
    private listViewInstance;
    private headerData;
    private templateData;
    private topElementHeight;
    private bottomElementHeight;
    listItemHeight: number;
    private startingHeight;
    private domItemCount;
    private expectedDomItemCount;
    private scrollPosition;
    private onVirtualScroll;
    private checkListWrapper;
    private iconCssWrapper;
    uiFirstIndex: number;
    private uiLastIndex;
    private totalHeight;
    private topElement;
    private bottomElement;
    private activeIndex;
    private uiIndices;
    private listDiff;
    uiVirtualization(): void;
    wireScrollEvent(destroy: boolean): void;
    private ValidateItemCount(dataSourceLength);
    private uiIndicesInitialization();
    private getscrollerHeight();
    private onVirtualUiScroll();
    private onLongScroll(listDiff, isScrollingDown);
    private onNormalScroll(listDiff, isScrollingDown);
    private updateUiContent(element, index);
    private changeElementAttributes(element, index);
    private findDSAndIndexFromId(ds, fields);
    getSelectedItems(): UISelectedItem;
    selectItem(obj: Fields | HTMLElement): void;
    enableItem(obj: Fields | HTMLElement): void;
    disableItem(obj: Fields | HTMLElement): void;
    showItem(obj: Fields | HTMLElement): void;
    hideItem(obj: Fields | HTMLElement): void;
    removeItem(obj: Element | Fields): void;
    setCheckboxLI(li: Element, e?: MouseEvent | KeyboardEvent | FocusEvent): void;
    setSelectLI(li: Element, e?: MouseEvent | KeyboardEvent | FocusEvent): void;
    checkedItem(checked: boolean): void;
    private addUiItem(index);
    private removeUiItem(index);
    private changeUiIndices(index, increment);
    addItem(data: {
        [key: string]: Object;
    }[], fields: Fields): void;
    createUIItem(args: ItemCreatedArgs): void;
    private compileTemplate(element, item, isHeader);
    private onChange(newData, listElement);
    private updateContextData(listElement, node, isHeader);
    private classProperty(element, listElement, isHeader);
    private attributeProperty(element, listElement, isHeader);
    private textProperty(element, listElement, isHeader);
    reRenderUiVirtualization(): void;
    private updateUI(element, index, targetElement?);
    getModuleName(): string;
    destroy(): void;
}
