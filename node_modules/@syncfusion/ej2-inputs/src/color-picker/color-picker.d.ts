import { BaseEventArgs, Component, EmitType, INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { ColorPickerModel } from './color-picker-model';
/**
 * ColorPicker Mode
 */
export declare type ColorPickerMode = 'Picker' | 'Palette';
/**
 * ColorPicker component is a user interface to select and adjust color values. It provides supports for various
 * color specification like Red Green Blue, Hue Saturation Value and Hex codes.
 * ```html
 * <input type="color" id="color-picker">
 * ```
 * ```typescript
 * <script>
 *   let colorPickerObj: ColorPicker = new ColorPicker(null , "#color-picker");
 * </script>
 * ```
 */
export declare class ColorPicker extends Component<HTMLInputElement> implements INotifyPropertyChanged {
    private splitBtn;
    private hueSlider;
    private opacitySlider;
    private tooltipEle;
    private container;
    private modal;
    private l10n;
    private tileRipple;
    private ctrlBtnRipple;
    private clientX;
    private clientY;
    private rgb;
    private hsv;
    /**
     * It is used to set the color value for ColorPicker. It should be specified as Hex code.
     * @default '#008000'
     */
    value: string;
    /**
     * This property sets the CSS classes to root element of the ColorPicker
     *  which helps to customize the UI styles.
     * @default ''
     */
    cssClass: string;
    /**
     * It is used to enable / disable ColorPicker component. If it is disabled the ColorPicker popup wonâ€™t open.
     * @default false
     */
    disabled: boolean;
    /**
     * It is used to render the ColorPicker component from right to left direction.
     * @default false
     */
    enableRtl: boolean;
    /**
     * It is used to render the ColorPicker with the specified mode.
     * @default 'Picker'
     */
    mode: ColorPickerMode;
    /**
     * It is used to show / hide the mode switcher button of ColorPicker component.
     * @default true
     */
    modeSwitcher: boolean;
    /**
     * It is used to load custom colors to palette.
     * @default null
     */
    presetColors: {
        [key: string]: string[];
    };
    /**
     * It is used to show / hide the control buttons (apply / cancel) of  ColorPicker component.
     * @default true
     */
    showButtons: boolean;
    /**
     * It is used to render the ColorPicker palette with specified columns.
     * @default 10
     */
    columns: number;
    /**
     * It is used to render the ColorPicker component as inline (flat).
     * @default false
     */
    inline: boolean;
    /**
     * It is used to enable / disable the no color option of ColorPicker component.
     * @default false
     */
    noColor: boolean;
    /**
     * To enable or disable persisting component's state between page reloads and it is extended from component class.
     * @default false
     */
    enablePersistence: boolean;
    /**
     * Triggers while selecting the color in picker / palette, when showButtons property is enabled.
     * @event
     */
    select: EmitType<ColorPickerEventArgs>;
    /**
     * Triggers while changing the colors. It will be triggered based on the showButtons property.
     * If the property is false, the event will be triggered while selecting the colors.
     * If the property is true, the event will be triggered while apply the selected color.
     * @event
     */
    change: EmitType<ColorPickerEventArgs>;
    /**
     * Trigger while rendering each palette tile.
     * @event
     */
    beforeTileRender: EmitType<PaletteTileEventArgs>;
    /**
     * Triggers before opening the ColorPicker popup.
     * @event
     */
    beforeOpen: EmitType<BeforeOpenCloseEventArgs>;
    /**
     * Triggers while opening the ColorPicker popup.
     * @event
     */
    open: EmitType<OpenEventArgs>;
    /**
     * Triggers before closing the ColorPicker popup.
     * @event
     */
    beforeClose: EmitType<BeforeOpenCloseEventArgs>;
    /**
     * Triggers before Switching between ColorPicker mode.
     * @event
     */
    beforeModeSwitch: EmitType<ModeSwitchEventArgs>;
    constructor(options?: ColorPickerModel, element?: string | HTMLInputElement);
    protected preRender(): void;
    /**
     * To Initialize the component rendering
     * @private
     */
    render(): void;
    private initWrapper();
    private getWrapper();
    private createWidget();
    private createSplitBtn();
    private onOpen(args);
    private getPopupInst();
    private beforeOpenFn(args);
    private popupClose(args);
    private createPalette();
    private firstPaletteFocus();
    private appendPalette(colors, key, refEle?);
    private setNoColor();
    private appendElement(ele, insertPos?);
    private addTileSelection(ele);
    private createPicker();
    private setHsvContainerBg(h?);
    private getHsvContainer();
    private setHandlerPosition();
    private createSlider();
    private updateOpacitySliderBg();
    private hueChange(args);
    private opacityChange(args);
    private createPreview(parentEle?);
    private isPicker();
    private getPopupEle();
    private getNumericTextBoxModel(value, label, max);
    private createInput(child?);
    private createCtrlBtn();
    private appendModeSwitchBtn();
    private createDragTooltip();
    private getTooltipInst();
    private setTooltipOffset(value);
    private toggleDisabled(enable);
    private convertToRgbString(rgb);
    private convertToHsvString(hsv);
    private updateHsv();
    private convertToOtherFormat(isKey?);
    private updateInput(value);
    private updatePreview(value);
    private getDragHandler();
    private removeTileSelection();
    private convertRgbToNumberArray(value);
    /**
     * To get color value in specified type.
     * @param value - Specify the color value.
     * @param type - Specify the converted color value type.
     * @method getValue
     * @return {string}
     */
    getValue(value?: string, type?: string): string;
    /**
     * To show/hide ColorPicker popup based on current state of the SplitButton.
     * @method toggle
     * @return {void}
     */
    toggle(): void;
    /**
     * Get component name.
     * @returns string
     * @private
     */
    getModuleName(): string;
    /**
     * Gets the properties to be maintained in the persisted state.
     * @return {string}
     */
    getPersistData(): string;
    protected wireEvents(): void;
    private addCtrlSwitchEvent();
    private addInputEvent();
    private addvalueEventHandler();
    private pickerKeyDown(e);
    private enterKeyHandler(value);
    private triggerChangeEvent(value);
    private handlerDragPosition(prob, value, e);
    private handlerDown(e);
    private handlerMove(e);
    private setHsv(clientX, clientY);
    private handlerEnd(e);
    private btnClickHandler(e);
    private switchToPalette();
    private refreshPopupPos();
    private formatSwitchHandler(e);
    private updateValue(value, format, idx?, max?);
    private previewHandler(e);
    private paletteClickHandler(e);
    private noColorTile(isKey?);
    private switchToPicker();
    private ctrlBtnClick(ele);
    private paletteKeyDown(e);
    private keySelectionChanges(newEle);
    private tilePosition(items, element, cIdx);
    private inputHandler(e);
    private inputValueChange(hsv, pValue, value?);
    private triggerEvent(cValue, pValue, rgba, isKey?);
    /**
     * Removes the component from the DOM and detaches all its related event handlers.
     * Also it maintains the initial input element from the DOM.
     * @method destroy
     * @return {void}
     */
    destroy(): void;
    private destroyOtherComp();
    private isPopupOpen();
    protected unWireEvents(): void;
    private roundValue(value);
    private hexToRgb(hex);
    private rgbToHsv(r, g, b, opacity?);
    private hsvToRgb(h, s, v, opacity?);
    private rgbToHex(rgb);
    private hex(x);
    private changeModeSwitcherProp(prop);
    private changeShowBtnProps(prop);
    private changeValueProp(newProp);
    private setInputEleProps(prop);
    private changeDisabledProp(newProp);
    private changeCssClassProps(newProp, oldProp);
    private changeRtlProps(newProp);
    private changePaletteProps();
    /**
     * Called internally if any of the property value changed.
     * @param  {ColorPickerModel} newProp
     * @param  {ColorPickerModel} oldProp
     * @returns void
     * @private
     */
    onPropertyChanged(newProp: ColorPickerModel, oldProp: ColorPickerModel): void;
}
/**
 * Interface for change / select event.
 * @private
 */
export interface ColorPickerEventArgs extends BaseEventArgs {
    currentValue: {
        hex: string;
        rgba: string;
    };
    previousValue: {
        hex: string;
        rgba: string;
    };
}
/**
 * Interface for before change event.
 * @private
 */
export interface PaletteTileEventArgs extends BaseEventArgs {
    element: HTMLElement;
    presetName: string;
    value: string;
}
/**
 * Interface for before open / close event.
 * @private
 */
export interface BeforeOpenCloseEventArgs extends BaseEventArgs {
    element: HTMLElement;
    event: Event;
    cancel: boolean;
}
/**
 * Interface for open event.
 * @private
 */
export interface OpenEventArgs extends BaseEventArgs {
    element: HTMLElement;
}
/**
 * Interface for mode switching event.
 * @private
 */
export interface ModeSwitchEventArgs extends BaseEventArgs {
    element: HTMLElement;
    mode: string;
}
